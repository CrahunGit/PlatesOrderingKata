@page "/orders"
@rendermode InteractiveServer

@using Domain
@using Domain.Domain
@using FluentValidation
@using Microsoft.EntityFrameworkCore

@inject AppDbContext context

<h3>OrderPage</h3>

<button @onclick="@(() => showForm = true)">Add new one</button>

@if (showForm)
{
    <EditForm FormName="SavePlateOrder" Model="plate" OnValidSubmit="Save">
        <Blazored.FluentValidation.FluentValidationValidator />

        <InputText @bind-Value="plate.Name"></InputText>
        <ValidationMessage For="@(() => plate.Name)"></ValidationMessage>

        <InputNumber @bind-Value="plate.Price"></InputNumber>
        <ValidationMessage For="@(() => plate.Price)"></ValidationMessage>

        <button type="submit">Enviar</button>
    </EditForm>
}

@if (isLoaded is false)
{
    <span>Loading....</span>
}
else
{
    <ul>
        @foreach (var plate in plates)
        {
            <li>@plate.Name @plate.Price</li>
        }
    </ul>
}

@code {
    List<Plate> plates = new();
    bool isLoaded = false;
    bool showForm = false;
    DtoPlate plate = new();

    protected override async Task OnInitializedAsync()
    {
        plates = await context.Plates.ToListAsync();
        isLoaded = true;
    }

    private async Task Save()
    {
        var newPlate = new Plate(plate.Name, plate.Price ?? 0);
        context.Add(newPlate);
        await context.SaveChangesAsync();

        plates = await context.Plates.ToListAsync();
        isLoaded = true;
        showForm = false;
        plate = new();
        StateHasChanged();
    }
}
